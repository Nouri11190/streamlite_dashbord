<html><head></head><body style="overflow-wrap: break-word; -webkit-nbsp-mode: space; line-break: after-white-space;"><div>import streamlit as st</div><div>import json</div><div>import pandas as pd</div><div>import os</div><div>from auth import generate_password, verify_login</div><div>from data_processor import load_diagnostic_data, get_account_data</div><div><br></div><div># Page configuration</div><div>st.set_page_config(</div><div>&nbsp; &nbsp; page_title="Social Media Business Dashboard",</div><div>&nbsp; &nbsp; page_icon="üìä",</div><div>&nbsp; &nbsp; layout="wide",</div><div>&nbsp; &nbsp; initial_sidebar_state="expanded"</div><div>)</div><div><br></div><div># Load the diagnostic data</div><div>data = load_diagnostic_data()</div><div><br></div><div># Function to render login page</div><div>def login_page():</div><div>&nbsp; &nbsp; st.title("Social Media Business Dashboard")</div><div>&nbsp; &nbsp; st.subheader("Login to your account")</div><div>&nbsp; &nbsp;&nbsp;</div><div>&nbsp; &nbsp; col1, col2 = st.columns([1, 1])</div><div>&nbsp; &nbsp;&nbsp;</div><div>&nbsp; &nbsp; with col1:</div><div>&nbsp; &nbsp; &nbsp; &nbsp; email = st.text_input("Email Address", placeholder="Enter your email")</div><div><br></div><div>&nbsp; &nbsp; &nbsp; &nbsp; # Add email suggestions</div><div>&nbsp; &nbsp; &nbsp; &nbsp; if st.button("Use Business Email"):</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; st.session_state.email = "nouridarylaglainua@gmail.com"</div><div>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; if st.button("Use Example Email"):</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; st.session_state.email = "jonhdeo@example.com"</div><div><br></div><div>&nbsp; &nbsp; &nbsp; &nbsp; # Preserve selected email</div><div>&nbsp; &nbsp; &nbsp; &nbsp; if 'email' in st.session_state:</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; email = st.session_state.email</div><div>&nbsp; &nbsp;&nbsp;</div><div>&nbsp; &nbsp; with col2:</div><div>&nbsp; &nbsp; &nbsp; &nbsp; password = st.text_input("Password", type="password", placeholder="Enter your password")</div><div><br></div><div>&nbsp; &nbsp; &nbsp; &nbsp; if st.button("Generate Password"):</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; st.session_state.password = generate_password()</div><div>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; # Hide generated password from being displayed</div><div>&nbsp; &nbsp; &nbsp; &nbsp; if 'password' in st.session_state:</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; password = st.session_state.password</div><div>&nbsp; &nbsp;&nbsp;</div><div>&nbsp; &nbsp; if st.button("Login", type="primary"):</div><div>&nbsp; &nbsp; &nbsp; &nbsp; if verify_login(email, password):</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; st.session_state.logged_in = True</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; st.session_state.email = email</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; st.rerun()</div><div>&nbsp; &nbsp; &nbsp; &nbsp; else:</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; st.error("Invalid login credentials. Please try again.")</div><div><br></div><div># Function to render main dashboard</div><div>def main_dashboard():</div><div>&nbsp; &nbsp; st.sidebar.title("Accounts")</div><div><br></div><div>&nbsp; &nbsp; # Get all account names safely</div><div>&nbsp; &nbsp; account_names = [item["name"] for item in data["datas"][1:] if "name" in item]</div><div><br></div><div>&nbsp; &nbsp; selected_account = st.sidebar.selectbox("Select Account", account_names)</div><div><br></div><div>&nbsp; &nbsp; st.title("Social Media Business Dashboard")</div><div>&nbsp; &nbsp; st.subheader(f"Welcome, {st.session_state.email}")</div><div><br></div><div>&nbsp; &nbsp; # Get selected account data</div><div>&nbsp; &nbsp; account_data = get_account_data(data, selected_account)</div><div><br></div><div>&nbsp; &nbsp; # Display account information</div><div>&nbsp; &nbsp; col1, col2 = st.columns([2, 1])</div><div><br></div><div>&nbsp; &nbsp; with col1:</div><div>&nbsp; &nbsp; &nbsp; &nbsp; st.header(f"{selected_account}'s Account Overview")</div><div><br></div><div>&nbsp; &nbsp; &nbsp; &nbsp; # Convert account data safely</div><div>&nbsp; &nbsp; &nbsp; &nbsp; account_df = pd.DataFrame(account_data["datas"])</div><div>&nbsp; &nbsp; &nbsp; &nbsp; if not account_df.empty and 'field' in account_df and 'value' in account_df:</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; account_info = pd.DataFrame({</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 'Metric': account_df['field'],</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 'Value': account_df['value']</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }).fillna("N/A")</div><div><br></div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; st.dataframe(account_info.set_index('Metric'), use_container_width=True)</div><div><br></div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; # Extract domain and skin color safely</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; domain = account_df.loc[account_df['field'] == 'domain', 'value'].values</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; skin_color = account_df.loc[account_df['field'] == 'skin', 'value'].values</div><div><br></div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; domain = domain[0] if len(domain) &gt; 0 else "Unknown"</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; skin_color = f"#{skin_color[0]}" if len(skin_color) &gt; 0 and not skin_color[0].startswith('#') else "#000000"</div><div><br></div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; st.subheader("Account Domain")</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; st.markdown(f"&lt;div style='background-color: {skin_color}; padding: 10px; border-radius: 5px; color: white;'&gt;&lt;strong&gt;{domain}&lt;/strong&gt;&lt;/div&gt;", unsafe_allow_html=True)</div><div>&nbsp; &nbsp; &nbsp; &nbsp; else:</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; st.error("No account data available.")</div><div><br></div><div>&nbsp; &nbsp; with col2:</div><div>&nbsp; &nbsp; &nbsp; &nbsp; st.subheader("Cookie Information")</div><div><br></div><div>&nbsp; &nbsp; &nbsp; &nbsp; # Extract cookie data safely</div><div>&nbsp; &nbsp; &nbsp; &nbsp; cookie_count = account_df.loc[account_df['field'] == 'cookies', 'value'].values</div><div>&nbsp; &nbsp; &nbsp; &nbsp; cookie_storage = account_df.loc[account_df['field'] == 'cookies storage', 'value'].values</div><div><br></div><div>&nbsp; &nbsp; &nbsp; &nbsp; cookie_count = int(cookie_count[0]) if len(cookie_count) &gt; 0 else 0</div><div>&nbsp; &nbsp; &nbsp; &nbsp; cookie_storage = cookie_storage[0] if len(cookie_storage) &gt; 0 else "N/A"</div><div><br></div><div>&nbsp; &nbsp; &nbsp; &nbsp; st.metric("Total Cookies", cookie_count)</div><div>&nbsp; &nbsp; &nbsp; &nbsp; st.metric("Cookie Storage", cookie_storage)</div><div><br></div><div>&nbsp; &nbsp; &nbsp; &nbsp; # Display pie chart with valid data</div><div>&nbsp; &nbsp; &nbsp; &nbsp; import plotly.express as px</div><div>&nbsp; &nbsp; &nbsp; &nbsp; if cookie_count &gt; 0:</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; fig = px.pie(</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; names=['Authentication', 'Preferences', 'Analytics', 'Other'],</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; values=[cookie_count * 0.4, cookie_count * 0.3, cookie_count * 0.2, cookie_count * 0.1],</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; title='Cookie Type Distribution (Estimated)',</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; color_discrete_sequence=px.colors.sequential.Blues</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; )</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; st.plotly_chart(fig, use_container_width=True)</div><div><br></div><div>&nbsp; &nbsp; # Dashboard navigation using session state instead of `st.switch_page()`</div><div>&nbsp; &nbsp; st.subheader("Dashboard Navigation")</div><div><br></div><div>&nbsp; &nbsp; col1, col2, col3, col4 = st.columns(4)</div><div>&nbsp; &nbsp; with col1:</div><div>&nbsp; &nbsp; &nbsp; &nbsp; if st.button("üìä Analytics Dashboard"):</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; st.session_state.page = "analytics"</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; st.rerun()</div><div>&nbsp; &nbsp;&nbsp;</div><div>&nbsp; &nbsp; with col2:</div><div>&nbsp; &nbsp; &nbsp; &nbsp; if st.button("üë§ Account Details"):</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; st.session_state.page = "account_details"</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; st.rerun()</div><div><br></div><div>&nbsp; &nbsp; with col3:</div><div>&nbsp; &nbsp; &nbsp; &nbsp; if st.button("üì± Social Metrics"):</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; st.session_state.page = "dashboard"</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; st.rerun()</div><div>&nbsp; &nbsp;&nbsp;</div><div>&nbsp; &nbsp; with col4:</div><div>&nbsp; &nbsp; &nbsp; &nbsp; if st.button("‚öôÔ∏è Account Settings"):</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; st.session_state.page = "account_settings"</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; st.rerun()</div><div><br></div><div>&nbsp; &nbsp; # Logout functionality</div><div>&nbsp; &nbsp; if st.sidebar.button("Logout"):</div><div>&nbsp; &nbsp; &nbsp; &nbsp; for key in list(st.session_state.keys()):</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; del st.session_state[key]</div><div>&nbsp; &nbsp; &nbsp; &nbsp; st.rerun()</div><div><br></div><div># Initialize session state if not set</div><div>if 'logged_in' not in st.session_state:</div><div>&nbsp; &nbsp; st.session_state.logged_in = False</div><div><br></div><div>if 'page' not in st.session_state:</div><div>&nbsp; &nbsp; st.session_state.page = "dashboard"</div><div><br></div><div># Main app logic</div><div>if not st.session_state.logged_in:</div><div>&nbsp; &nbsp; login_page()</div><div>else:</div><div>&nbsp; &nbsp; main_dashboard()</div></body></html>